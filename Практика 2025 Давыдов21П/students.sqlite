import tkinter as tk
from tkinter import messagebox
import sqlite3

# Подключение к базе данных SQLite
conn = sqlite3.connect('students.db')
cursor = conn.cursor()

# Создание таблицы students, если не существует
cursor.execute('''
CREATE TABLE IF NOT EXISTS students (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    fam TEXT NOT NULL,
    name TEXT NOT NULL,
    "group" TEXT NOT NULL,
    kurs INTEGER,
    year INTEGER,
    group_id INTEGER
)
''')
conn.commit()

def replace_group_and_assign_common_id():
    try:
        old_group = old_group_entry.get().strip()
        new_group = new_group_entry.get().strip()

        if not old_group or not new_group:
            messagebox.showwarning("Внимание", "Пожалуйста, заполните оба поля.")
            return

        # Обновляем название группы у студентов
        cursor.execute('UPDATE students SET "group" = ? WHERE "group" = ?', (new_group, old_group))
        conn.commit()

        if cursor.rowcount == 0:
            messagebox.showinfo("Информация", "Студенты с указанной старой группой не найдены.")
            return

        # Находим максимальный существующий group_id, чтобы присвоить новый
        cursor.execute('SELECT MAX(group_id) FROM students')
        max_group_id = cursor.fetchone()[0]
        if max_group_id is None:
            max_group_id = 0
        new_group_id = max_group_id + 1

        # Присваиваем всем студентам из новой группы общий group_id
        cursor.execute('UPDATE students SET group_id = ? WHERE "group" = ?', (new_group_id, new_group))
        conn.commit()

        messagebox.showinfo("Успех", f"Группа '{old_group}' заменена на '{new_group}'.\n"
                                     f"Общий group_id={new_group_id} присвоен {cursor.rowcount} студентам.")
    except sqlite3.Error as e:
        messagebox.showerror("Ошибка базы данных", f"Произошла ошибка: {e}")

# Создание окна Tkinter
root = tk.Tk()
root.title("Замена группы студентов и присвоение общего group_id")

# Метки и поля ввода
tk.Label(root, text="Старая группа (например, 0П):").grid(row=0, column=0, padx=10, pady=5, sticky='e')
old_group_entry = tk.Entry(root)
old_group_entry.grid(row=0, column=1, padx=10, pady=5)

tk.Label(root, text="Новая группа (например, 1А):").grid(row=1, column=0, padx=10, pady=5, sticky='e')
new_group_entry = tk.Entry(root)
new_group_entry.grid(row=1, column=1, padx=10, pady=5)

# Кнопка для запуска замены и присвоения общего group_id
replace_button = tk.Button(root, text="Заменить группу и присвоить общий ID", command=replace_group_and_assign_common_id)
replace_button.grid(row=2, column=0, columnspan=2, pady=10)

root.mainloop()

# Закрытие соединения с базой при выходе
conn.close()

